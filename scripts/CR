#!/usr/bin/env python
import sys
import os


class COLORS:

	FG_BLACK = '\033[30m'
	FG_RED = '\033[31m'
	FG_GREEN = '\033[32m'
	FG_YELLOW = '\033[33m'
	FG_BLUE = '\033[34m'
	FG_MAGENTA = '\033[35m'
	FG_CYAN = '\033[36m'
	FG_WHITE = '\033[37m'

	BG_BLACK = '\033[40m'
	BG_RED = '\033[41m'
	BG_GREEN = '\033[42m'
	BG_YELLOW = '\033[43m'
	BG_BLUE = '\033[44m'
	BG_MAGENTA = '\033[45m'
	BG_CYAN = '\033[46m'
	BG_WHITE = '\033[47m'

	FG_LIGHT_BLACK = '\033[90m'
	FG_LIGHT_RED = '\033[91m'
	FG_LIGHT_GREEN = '\033[92m'
	FG_LIGHT_YELLOW = '\033[93m'
	FG_LIGHT_BLUE = '\033[94m'
	FG_LIGHT_MAGENTA = '\033[95m'
	FG_LIGHT_CYAN = '\033[96m'
	FG_LIGHT_WHITE = '\033[97m'

	BG_LIGHT_BLACK = '\033[100m'
	BG_LIGHT_RED = '\033[101m'
	BG_LIGHT_GREEN = '\033[102m'
	BG_LIGHT_YELLOW = '\033[103m'
	BG_LIGHT_BLUE = '\033[104m'
	BG_LIGHT_MAGENTA = '\033[105m'
	BG_LIGHT_CYAN = '\033[106m'
	BG_LIGHT_WHITE = '\033[107m'

	RESET = '\033[0m'


# command CR 'base' 'target' 'source/s'
def main():
	num = len(sys.argv)

	if num < 4:
		print(f"{COLORS.FG_RED}At least 3 arguments needed. {num} provided.{COLORS.RESET}")
		quit(1)

	base_path = sys.argv[1]
	output_path = sys.argv[2]
	component_paths = sys.argv[3:]

	components_names: list[str] = []
	components_content: list[str] = []

	for comp_filename in component_paths:
		# take the path and reduce it to only the filename
		components_names.append(os.path.basename(os.path.splitext(comp_filename)[0]))
		with open(comp_filename) as component:
			components_content.append(component.read())

	base_file: str
	try:
		with open(base_path) as base:
			base_file = base.read()
	except IsADirectoryError:
		print(base_path + " is a directory, doing nothing")
		exit(1)

	for i in range(len(components_names)):
		# simple conponent withou props and closing />

		comp_pos_start = base_file.find("<" + components_names[i])

		if comp_pos_start == -1:
			break

		comp_pos_end = base_file[comp_pos_start:].find("/>") + comp_pos_start # ignore the /> on purpuse 

		comp_tag: str = base_file[comp_pos_start:comp_pos_end]

		props: dict[str, str] = {}

		elements = comp_tag.split()

		# print(elements, comp_tag)

		for el in elements:
			parts = el.split("=")

			if len(parts) == 2:
				
				props[parts[0]] = parts[1]

		new_comp = components_content[i]
	
		for name in props:
			new_comp = new_comp.replace(f"~{name}~", props[name])

		base_file = base_file.replace(base_file[comp_pos_start:comp_pos_end+2], new_comp)

	with open(output_path, "w+") as f:
		f.write(base_file)


if __name__ == "__main__":
	main()
