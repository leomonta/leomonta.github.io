#!/usr/bin/env python
import sys
import os


class COLORS:

	FG_BLACK = '\033[30m'
	FG_RED = '\033[31m'
	FG_GREEN = '\033[32m'
	FG_YELLOW = '\033[33m'
	FG_BLUE = '\033[34m'
	FG_MAGENTA = '\033[35m'
	FG_CYAN = '\033[36m'
	FG_WHITE = '\033[37m'

	BG_BLACK = '\033[40m'
	BG_RED = '\033[41m'
	BG_GREEN = '\033[42m'
	BG_YELLOW = '\033[43m'
	BG_BLUE = '\033[44m'
	BG_MAGENTA = '\033[45m'
	BG_CYAN = '\033[46m'
	BG_WHITE = '\033[47m'

	FG_LIGHT_BLACK = '\033[90m'
	FG_LIGHT_RED = '\033[91m'
	FG_LIGHT_GREEN = '\033[92m'
	FG_LIGHT_YELLOW = '\033[93m'
	FG_LIGHT_BLUE = '\033[94m'
	FG_LIGHT_MAGENTA = '\033[95m'
	FG_LIGHT_CYAN = '\033[96m'
	FG_LIGHT_WHITE = '\033[97m'

	BG_LIGHT_BLACK = '\033[100m'
	BG_LIGHT_RED = '\033[101m'
	BG_LIGHT_GREEN = '\033[102m'
	BG_LIGHT_YELLOW = '\033[103m'
	BG_LIGHT_BLUE = '\033[104m'
	BG_LIGHT_MAGENTA = '\033[105m'
	BG_LIGHT_CYAN = '\033[106m'
	BG_LIGHT_WHITE = '\033[107m'

	RESET = '\033[0m'


# Should be more that enought to not interfere with any genuine use
MAX_REPETITIONS = 100


def get_compiled_component(component: str, props: dict[str, str]) -> str:
	"""
	Parse the component searching for default prop intializers

	returns the found props at pos 0 and the component stripped of the default initializers at the start
	"""

	curr_start = 0
	defaults: dict[str, str] = {}

	# line by line
	while True:

		# to be a valid default setup it has to start at the first of the line and be at the top of the file
		if component[curr_start] != "~":
			break

		end_line = component.find("\n", curr_start)

		# end of the file
		if end_line < 0:
			break

		closing_tilde = component.find("~", curr_start + 1, end_line)

		# we have a prop name
		if closing_tilde >= 0:
			parts = component[curr_start:end_line].split("=", 1)

			# we have a prop value
			if len(parts) == 2:
				parts[0] = parts[0].strip("~")
				defaults[parts[0]] = parts[1]

		curr_start = end_line + 1

	# merges the two dict together and replace any duplicate name from default with the ones from hte given props
	defaults.update(props)

	component = component[curr_start:]

	for name in defaults:
		component = component.replace(f"~{name}~", defaults[name])

		# start checking from next line
	return component


# command CR 'base' 'target' 'source/s'
def main():
	num = len(sys.argv)

	if num < 4:
		print(f"{COLORS.FG_RED}At least 3 arguments needed. {num} provided.{COLORS.RESET}")
		quit(1)

	base_path = sys.argv[1]
	output_path = sys.argv[2]
	component_paths = sys.argv[3:]

	components_names: list[str] = []
	components_content: list[str] = []

	for comp_filename in component_paths:
		# take the path and reduce it to only the filename
		components_names.append(os.path.basename(os.path.splitext(comp_filename)[0]))
		with open(comp_filename) as component:
			components_content.append(component.read())

	base_file: str
	try:
		with open(base_path) as base:
			base_file = base.read()
	except IsADirectoryError:
		print(base_path + " is a directory, doing nothing")
		exit(1)

	repetition = 0
	changes = 0
	while True:
		for i in range(len(components_names)):
			# simple conponent withou props and closing />

			comp_pos_start = base_file.find("<" + components_names[i])

			if comp_pos_start == -1:
				continue

			# ignore the /> on purpuse
			comp_pos_end = base_file[comp_pos_start:].find("/>") + comp_pos_start

			comp_tag: str = base_file[comp_pos_start + 1:comp_pos_end]

			# collect all of the props defined in the component use
			props: dict[str, str] = {}

			elements = comp_tag.split()

			for el in elements:
				parts = el.split("=", 1)

				if len(parts) == 2:
					props[parts[0]] = parts[1]

			compiled_component = get_compiled_component(components_content[i], props)

			base_file = base_file.replace(base_file[comp_pos_start:comp_pos_end + 2], "\n" + compiled_component)

			# we count any repacing as a change
			changes += 1

		# stop only if there are no more changes or if the max recursion limit has been hit
		if changes == 0:
			break
		changes = 0

		# or stops if we made to many passages (prolly a recursive component)
		if repetition > MAX_REPETITIONS:
			print(f"{COLORS.FG_YELLOW}Stopped replacing components due to exceeding the max repetion count of {MAX_REPETITIONS}.{COLORS.RESET}")
			break
		repetition += 1

	with open(output_path, "w+") as f:
		f.write(base_file)


if __name__ == "__main__":
	main()
